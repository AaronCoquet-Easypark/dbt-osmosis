"use strict";(self.webpackChunkdbt_osmosis=self.webpackChunkdbt_osmosis||[]).push([[781],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var o=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=o.createContext({}),m=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=m(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=m(r),p=a,h=c["".concat(l,".").concat(p)]||c[p]||u[p]||n;return r?o.createElement(h,i(i({ref:t},d),{},{components:r})):o.createElement(h,i({ref:t},d))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,i=new Array(n);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var m=2;m<n;m++)i[m]=r[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}p.displayName="MDXCreateElement"},867:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>m});var o=r(7462),a=(r(7294),r(3905));const n={sidebar_position:2},i="CLI Overview",s={unversionedId:"tutorial-basics/commands",id:"tutorial-basics/commands",title:"CLI Overview",description:"This section describes the commands available in dbt-osmosis.",source:"@site/docs/tutorial-basics/commands.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/commands",permalink:"/dbt-osmosis/docs/tutorial-basics/commands",draft:!1,editUrl:"https://github.com/z3z1ma/dbt-osmosis/tree/main/docs/docs/tutorial-basics/commands.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/dbt-osmosis/docs/tutorial-basics/installation"},next:{title:"dbt-osmosis - YAML",permalink:"/dbt-osmosis/docs/category/dbt-osmosis---yaml"}},l={},m=[{value:"YAML Management",id:"yaml-management",level:2},{value:"Document",id:"document",level:3},{value:"Organize",id:"organize",level:3},{value:"Refactor",id:"refactor",level:3},{value:"Server",id:"server",level:2},{value:"Serve",id:"serve",level:3},{value:"Register Project",id:"register-project",level:3},{value:"Unregister Project",id:"unregister-project",level:3},{value:"SQL",id:"sql",level:2},{value:"Run",id:"run",level:3},{value:"Compile",id:"compile",level:3},{value:"Workbench",id:"workbench",level:2},{value:"Diff",id:"diff",level:2}],d={toc:m},c="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cli-overview"},"CLI Overview"),(0,a.kt)("p",null,"This section describes the commands available in dbt-osmosis."),(0,a.kt)("h2",{id:"yaml-management"},"YAML Management"),(0,a.kt)("p",null,"These commands are used to manage the YAML files in your dbt project. Please read the ",(0,a.kt)("a",{parentName:"p",href:"/docs/tutorial-yaml/configuration"},"YAML configuration")," section to understand the minimum required configuration to use these commands."),(0,a.kt)("h3",{id:"document"},"Document"),(0,a.kt)("p",null,"This command will document your dbt project YAML files. Specifically it will:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Reorder columns in your YAML files to match the order of the columns in your database"),(0,a.kt)("li",{parentName:"ul"},"Add columns to your YAML files that are present in your database"),(0,a.kt)("li",{parentName:"ul"},"Remove columns from your YAML files that are missing from your database"),(0,a.kt)("li",{parentName:"ul"},"Pass down column level documentation from upstream models to downstream models (if the downstream model does not have documentation for that column)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dbt-osmosis yaml document [--project-dir] [--profiles-dir] [--target]\n")),(0,a.kt)("h3",{id:"organize"},"Organize"),(0,a.kt)("p",null,"This command will organize your dbt project YAML files. Specifically it will:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Bootstrap sources if they do not exist based on the ",(0,a.kt)("inlineCode",{parentName:"li"},"dbt-osmosis")," ",(0,a.kt)("strong",{parentName:"li"},"var")," in your ",(0,a.kt)("inlineCode",{parentName:"li"},"dbt_project.yml")," file."),(0,a.kt)("li",{parentName:"ul"},"Migrate your YAML files based on the dbt-osmosis ",(0,a.kt)("strong",{parentName:"li"},"config")," (ideally) set in your ",(0,a.kt)("inlineCode",{parentName:"li"},"dbt_project.yml")," file."),(0,a.kt)("li",{parentName:"ul"},"Ensures that your project matches a declarative specification (i.e. your YAML files are in the correct location and have the correct name).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dbt-osmosis yaml organize [--project-dir] [--profiles-dir] [--target]\n")),(0,a.kt)("h3",{id:"refactor"},"Refactor"),(0,a.kt)("p",null,"This command will refactor your dbt project YAML files. Specifically it will:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Bootstrap sources if they do not exist based on the ",(0,a.kt)("inlineCode",{parentName:"li"},"dbt-osmosis")," ",(0,a.kt)("strong",{parentName:"li"},"var")," in your ",(0,a.kt)("inlineCode",{parentName:"li"},"dbt_project.yml")," file."),(0,a.kt)("li",{parentName:"ul"},"Migrate your YAML files based on the dbt-osmosis ",(0,a.kt)("strong",{parentName:"li"},"config")," (ideally) set in your ",(0,a.kt)("inlineCode",{parentName:"li"},"dbt_project.yml")," file."),(0,a.kt)("li",{parentName:"ul"},"Ensures that your project matches a declarative specification (i.e. your YAML files are in the correct location and have the correct name)."),(0,a.kt)("li",{parentName:"ul"},"Reorder columns in your YAML files to match the order of the columns in your database"),(0,a.kt)("li",{parentName:"ul"},"Add columns to your YAML files that are present in your database"),(0,a.kt)("li",{parentName:"ul"},"Remove columns from your YAML files that are missing from your database"),(0,a.kt)("li",{parentName:"ul"},"Pass down column level documentation from upstream models to downstream models (if the downstream model does not have documentation for that column)")),(0,a.kt)("p",null,"This command is a combination of the ",(0,a.kt)("inlineCode",{parentName:"p"},"document")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"organize")," commands run in the correct order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dbt-osmosis yaml refactor [--project-dir] [--profiles-dir] [--target]\n")),(0,a.kt)("h2",{id:"server"},"Server"),(0,a.kt)("p",null,"dbt-osmosis ships with a server that can be used to drive 3rd party tools. This server is a zero dependency WSGI server powered by ",(0,a.kt)("a",{parentName:"p",href:"https://bottlepy.org/docs/dev/"},"bottle"),'. It provides high performance endpoints that leverage the plumbing in dbt-osmosis to provide a fast and reliable API. The server is "multi-tenant" in that it can serve multiple dbt projects at once. The server is not intended to be run on a public facing network. dbt-osmosis is essentially providing a thin CLI wrapper over dbt-core-interface where the server is actually implemented.'),(0,a.kt)("h3",{id:"serve"},"Serve"),(0,a.kt)("p",null,"This command will start the dbt-osmosis server. The server will be available at ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:8581")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dbt-osmosis server serve [--host] [--port]\n")),(0,a.kt)("h3",{id:"register-project"},"Register Project"),(0,a.kt)("p",null,"This command will register a dbt project with the dbt-osmosis server. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dbt-osmosis server register-project --project-path /path/to/dbt/project\n")),(0,a.kt)("h3",{id:"unregister-project"},"Unregister Project"),(0,a.kt)("p",null,"This command will unregister a dbt project with the dbt-osmosis server. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dbt-osmosis server unregister-project --project-path /path/to/dbt/project\n")),(0,a.kt)("h2",{id:"sql"},"SQL"),(0,a.kt)("p",null,"These commands provide two unique and interesting ways to interact with dbt models. Both of these commands support stdin as an input source. This allows you to pipe a SQL query into the command or ",(0,a.kt)("inlineCode",{parentName:"p"},"cat")," a dbt model into the command."),(0,a.kt)("h3",{id:"run"},"Run"),(0,a.kt)("p",null,"This command will run a dbt model and return the results as a JSON object. This command is useful for testing dbt models in a REPL environment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dbt-osmosis sql run [--project-dir] [--profiles-dir] [--target] \"select * from {{ ref('my_model') }}\"\n")),(0,a.kt)("h3",{id:"compile"},"Compile"),(0,a.kt)("p",null,"This command will compile a dbt model and return the results as a JSON object. This command is useful for testing dbt models in a REPL environment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dbt-osmosis sql compile [--project-dir] [--profiles-dir] [--target] \"select * from {{ ref('my_model') }}\"\n")),(0,a.kt)("h2",{id:"workbench"},"Workbench"),(0,a.kt)("p",null,"This command starts a ",(0,a.kt)("a",{parentName:"p",href:"https://streamlit.io/"},"streamlit")," workbench. The workbench is a REPL environment that allows you to run dbt models, provides realtime side by side compilation, and lets you explore the results. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dbt-osmosis workbench [--project-dir] [--profiles-dir] [--target] [--host] [--port]\n")),(0,a.kt)("h2",{id:"diff"},"Diff"),(0,a.kt)("p",null,"This command will diff a dbt model across git commits. This command is useful for understanding how a model has changed over time. Currently this feature is under development. \ud83d\udea7"))}u.isMDXComponent=!0}}]);