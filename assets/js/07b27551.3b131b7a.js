"use strict";(self.webpackChunkdbt_osmosis=self.webpackChunkdbt_osmosis||[]).push([[393],{3905:(e,t,o)=>{o.d(t,{Zo:()=>m,kt:()=>f});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(o),d=n,f=u["".concat(s,".").concat(d)]||u[d]||p[d]||a;return o?r.createElement(f,i(i({ref:t},m),{},{components:o})):r.createElement(f,i({ref:t},m))}));function f(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},7730:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));const a={sidebar_position:1},i="Configuration",l={unversionedId:"tutorial-yaml/configuration",id:"tutorial-yaml/configuration",title:"Configuration",description:"Configuring dbt-osmosis",source:"@site/docs/tutorial-yaml/configuration.md",sourceDirName:"tutorial-yaml",slug:"/tutorial-yaml/configuration",permalink:"/dbt-osmosis/docs/tutorial-yaml/configuration",draft:!1,editUrl:"https://github.com/z3z1ma/dbt-osmosis/tree/main/docs/docs/tutorial-yaml/configuration.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"dbt-osmosis - YAML",permalink:"/dbt-osmosis/docs/category/dbt-osmosis---yaml"},next:{title:"Context Variables",permalink:"/dbt-osmosis/docs/tutorial-yaml/context"}},s={},c=[{value:"Configuring dbt-osmosis",id:"configuring-dbt-osmosis",level:2},{value:"Models",id:"models",level:3},{value:"Examples",id:"examples",level:4},{value:"Sources",id:"sources",level:3},{value:"Examples",id:"examples-1",level:4}],m={toc:c},u="wrapper";function p(e){let{components:t,...o}=e;return(0,n.kt)(u,(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"configuration"},"Configuration"),(0,n.kt)("h2",{id:"configuring-dbt-osmosis"},"Configuring dbt-osmosis"),(0,n.kt)("h3",{id:"models"},"Models"),(0,n.kt)("p",null,"dbt-osmosis' primary purpose is to automatically generate and manage YAML files for your dbt models. We opt for explicitness over implicitness. Thus the following configuration is required to even run dbt-osmosis. By specifying this configuration at the top-level beneath your project key, you are specifying a default configuration for all models in your project. You can override this configuration for individual models by specifying the ",(0,n.kt)("inlineCode",{parentName:"p"},"+dbt-osmosis")," configuration at various levels of the hierarchy in the configuration file. These levels match your folder structure exactly."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="dbt_project.yml"',title:'"dbt_project.yml"'},"models:\n  <your_project_name>:\n    +dbt-osmosis: <path>\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<your_project_name>")," is the name of your dbt project."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<path>")," is the path to the YAML file that will be generated for the model. This path is ",(0,n.kt)("strong",{parentName:"li"},"relative to the model's (sql file) directory."))),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="dbt_project.yml"',title:'"dbt_project.yml"'},'models:\n  your_project_name:\n    # a default blanket rule\n    +dbt-osmosis: "_{model}.yml"\n\n    staging:\n      # nest docs in subfolder relative to model\n      +dbt-osmosis: "schema/{model}.yml"\n\n    intermediate:\n      # separate docs based on materialization\n      +dbt-osmosis: "{node.config[materialized]}/{model}.yml"\n\n    marts:\n      # static paths are perfectly fine!\n      +dbt-osmosis: "prod.yml"\n')),(0,n.kt)("h3",{id:"sources"},"Sources"),(0,n.kt)("p",null,"dbt-osmosis can be configured to automatically generate YAML files for your dbt sources. To enable this feature, add the following to your ",(0,n.kt)("inlineCode",{parentName:"p"},"dbt_project.yml")," file."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="dbt_project.yml"',title:'"dbt_project.yml"'},"vars:\n  dbt-osmosis:\n    <source_name>: <path>\n    <source_name>:\n      path: <path>\n      schema: <schema>\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<source_name>")," is the name of a source in your ",(0,n.kt)("inlineCode",{parentName:"li"},"dbt_project.yml")," file."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<path>")," is the path to the YAML file that will be generated for the source. This path is relative to the root of your dbt project models directory."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"<schema>")," is the schema that will be used for the source. If not specified, the source name is assumed to be the schema which matches dbt's default behavior.")),(0,n.kt)("h4",{id:"examples-1"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="dbt_project.yml"',title:'"dbt_project.yml"'},'vars:\n  # a source with a different schema\n  salesforce:\n    path: "staging/salesforce/source.yml"\n    schema: "salesforce_v2"\n  \n  # a source with the same schema as the source name\n  marketo: "staging/customer/marketo.yml"\n\n  # a special variable interpolated at runtime\n  jira: "staging/project_mgmt/{parent}.yml"\n\n  # a dedicated directory for all sources\n  github: "all_sources/github.yml"\n')),(0,n.kt)("p",null,"Notice the use of the ",(0,n.kt)("inlineCode",{parentName:"p"},"{parent}")," variable in the ",(0,n.kt)("inlineCode",{parentName:"p"},"jira")," source configuration. This variable is a special variable that will be replaced with the name of the parent directory of the YAML file. The other special variables are ",(0,n.kt)("inlineCode",{parentName:"p"},"{node}")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"{model}"),". We will discuss these variables in more detail later."))}p.isMDXComponent=!0}}]);