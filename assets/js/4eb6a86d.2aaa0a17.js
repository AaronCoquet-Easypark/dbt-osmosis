"use strict";(self.webpackChunkdbt_osmosis=self.webpackChunkdbt_osmosis||[]).push([[293],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=d(n),p=r,f=c["".concat(l,".").concat(p)]||c[p]||u[p]||o;return n?a.createElement(f,i(i({ref:t},m),{},{components:n})):a.createElement(f,i({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},359:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},i="Context Variables",s={unversionedId:"tutorial-yaml/context",id:"tutorial-yaml/context",title:"Context Variables",description:"This section describes the context variables available in dbt-osmosis. These variables are used to derive dynamic naming rules for your yaml files.",source:"@site/docs/tutorial-yaml/context.md",sourceDirName:"tutorial-yaml",slug:"/tutorial-yaml/context",permalink:"/dbt-osmosis/docs/tutorial-yaml/context",draft:!1,editUrl:"https://github.com/z3z1ma/dbt-osmosis/tree/main/docs/docs/tutorial-yaml/context.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/dbt-osmosis/docs/tutorial-yaml/configuration"},next:{title:"Inheritance",permalink:"/dbt-osmosis/docs/tutorial-yaml/inheritance"}},l={},d=[{value:"<code>{model}</code>",id:"model",level:2},{value:"<code>{node}</code>",id:"node",level:2},{value:"<code>{parent}</code>",id:"parent",level:2}],m={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"context-variables"},"Context Variables"),(0,r.kt)("p",null,"This section describes the context variables available in dbt-osmosis. These variables are used to derive ",(0,r.kt)("strong",{parentName:"p"},"dynamic")," naming rules for your yaml files."),(0,r.kt)("h2",{id:"model"},(0,r.kt)("inlineCode",{parentName:"h2"},"{model}")),(0,r.kt)("p",null,"This variable is the name of the model that is currently being processed. This variable is useful when you want to generate a yaml file for each model in a directory. For a model named ",(0,r.kt)("inlineCode",{parentName:"p"},"stg_marketo__leads.sql"),", the model variable would be ",(0,r.kt)("inlineCode",{parentName:"p"},"stg_marketo__leads")," and can be used however you see fit."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="dbt_project.yml"',title:'"dbt_project.yml"'},'models:\n  jaffle_shop:\n    # this can be thought of as a default configuration, this must always be set by the user\n    +dbt-osmosis: "_{model}.yml"\n\n    intermediate:\n      # override the default configuration for the intermediate directory\n      +dbt-osmosis: "some/deeply/nested/path/{model}.yml"\n')),(0,r.kt)("h2",{id:"node"},(0,r.kt)("inlineCode",{parentName:"h2"},"{node}")),(0,r.kt)("p",null,"This variable is the actual node that dbt-osmosis is processing. This node object has all of the contents of a node as you might see in a ",(0,r.kt)("inlineCode",{parentName:"p"},"manifest.json")," file. There a many ways to use this but it is recommended you are familiar with the underlying data structure before using this variable."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="dbt_project.yml"',title:'"dbt_project.yml"'},'models:\n  jaffle_shop:\n    # don\'t forget to have a default, we have just omitted it for brevity\n\n    intermediate:\n      # advanced usage\n      +dbt-osmosis: "node.fqn[-2]/{node.resource_type}_{node.language}/{node.name}.yml"\n\n    marts:\n      # more advanced examples\n      +dbt-osmosis: "node.config[materialized]/node.tags[0]/schema.yml"\n')),(0,r.kt)("h2",{id:"parent"},(0,r.kt)("inlineCode",{parentName:"h2"},"{parent}")),(0,r.kt)("p",null,"This variable is the name of the parent directory of the YAML file that is currently being processed. This variable is useful if you want to generate a single yaml file for all the models in a directory dynamically based on the parent directory name. This should be equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"node.fqn[-2]")," but is more concise. The fqn prop lets you step further up the hierarchy but is not recommended except in advanced use cases."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="dbt_project.yml"',title:'"dbt_project.yml"'},'models:\n  jaffle_shop:\n    # don\'t forget to have a default, we have just omitted it for brevity\n\n    staging:\n      # make it so models in staging/salesforce, staging/marketo, etc. all route docs into\n      # files named salesforce.yml, marketo.yml, etc. in their respective directories\n      +dbt-osmosis: "{parent}.yml"\n')))}u.isMDXComponent=!0}}]);